apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins-master
  namespace: jenkins
spec:
  selector:
    matchExpressions:
    - key: podname
      operator: In
      value:
      - jenkins
  replicas: 1
  template:
    apiVersion: v1
    kind: Pod
    metadata:
      name: jenkins-master
      namespace: jenkins
    spec:
      containers:
      - name: jenkins-master
        image: jenkins/jenkins:lts-jdk11
        volumeMounts:
        - mountPath: /var/jenkins_home
          name: jenkins-dir
      volumes:
      - name: jenkins-dir
        hostPath:
          path: /mnt/jenkins-dir
          type: Directory
      nodeName: node01
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-master
  namespace: jenkins
spec:
  type: nodePort
  selector:
    podname: jenkins
  ports:
  - name: jenkins-port
    port: 50000
    targetPort: 50000
    nodePort: 50000
  - name: jenkins-port1
    port: 8080
    targetPort: 8080
    nodePort: 58000



registry.cn-qingdao.aliyuncs.com/dingchen/jenkins-slave:latest





podTemplate(label: 'jenkins-slave', cloud: 'kubernetes', containers: [
    containerTemplate(name: 'jenkins-slave', image: 'registry.cn-qingdao.aliyuncs.com/dingchen/jenkins-slave:latest', ttyEnabled: true ),
  ],
volumes: [
    //persistentVolumeClaim(mountPath: '/root/.m2', claimName: 'maven-m2'),
    //persistentVolumeClaim(mountPath: '/home/jenkins/agent/workspace', claimName: 'workspace'),
    ]
)
{
  node("jnlp-slave"){
      stage('Build'){
          //git branch: 'master', url: 'http://root:qrGw1S_azFE3F77Rs7tA@gitlab.gemantic.com/java/$JOB_NAME.git'
          container('maven') {
              stage('Build a Maven project') {
                  //sh 'mvn clean package -U deploy'
                  sh 'echo maven'
              }
          }
      }
      stage('deploy'){
          sh '''
          env
          sleep 300
          '''
          //sshPublisher(publishers: [sshPublisherDesc(configName: '76', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '/data/script/jenkins.sh $JOB_NAME', execTimeout: 120000000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '/data/kubernetes/service/$JOB_NAME', remoteDirectorySDF: false, removePrefix: 'target', sourceFiles: 'target/$JOB_NAME*.jar')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
      }
  }
}


jenkins/inbound-agent:4.3-4

pipeline {
    agent {
        node {
            label 'jenkins-slave'
        }
    }
    stages {
        stage("golang"){
            steps {
                container('jenkins-slave') {
                    sh 'go version'
                }
            }
        }
    }
}










podTemplate(containers: [
    containerTemplate(name: 'golang', image: 'golang:1.8.0', ttyEnabled: true, command: 'cat')
  ]) {
      
// podTemplate(cloud: 'kubernetes', 
// containers: [containerTemplate(args: '', command: 'go version', image: 'golang:1.8.0', 
// livenessProbe: containerLivenessProbe(execArgs: '', failureThreshold: 0, initialDelaySeconds: 0, periodSeconds: 0, successThreshold: 0, timeoutSeconds: 0), 
// name: 'golang', resourceLimitCpu: '', resourceLimitEphemeralStorage: '', resourceLimitMemory: '', resourceRequestCpu: '', resourceRequestEphemeralStorage: '', 
// resourceRequestMemory: '', ttyEnabled: true, workingDir: '/home/jenkins/agent')], label: 'golang', name: 'golang', namespace: 'jenkins') {
//     // some block
// }
    node(POD_LABEL) {
        stage('Golang project') {
            container('golang') {
                stage('Go test') {
                    sh 'go version'
                }
            }
        }

    }
  }